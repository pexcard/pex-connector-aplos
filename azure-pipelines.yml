# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

name: $(date:yyyy.MM.dd)$(rev:.r)

trigger:
- master

pr: none

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: mend-variables
- name: appName
  value: 'pex-connector-aplos'
- name: solution
  value: '**/*.sln'
- name: buildPlatform
  value: 'Any CPU'
- name: buildconfiguration
  value: 'Release'
- name: dotnetVersion
  value: '6.0'
- name: DOTNET_ROLL_FORWARD
  value: 'Major' # needed for sonarcloud scanner

steps:
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '$(dotnetVersion).x'

- task: NodeTool@0
  inputs:
    versionSpec: '18.x'
  displayName: 'Install node.js'

- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: 'SonarCloud - tbaker'
    organization: 'pex'
    projectKey: 'pex-connector-aplos'
    projectName: 'pex-connector-aplos'
    projectVersion: '$(Build.BuildNumber)'

- script: dotnet publish src --configuration $(buildConfiguration)
  displayName: 'dotnet publish $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'dotnet test $(buildConfiguration)'
  inputs:
    command: test
    projects: 'tests/**/*.csproj'
    arguments: '--configuration $(buildConfiguration)'

- task: SonarCloudAnalyze@1

- task: SonarCloudPublish@1
  inputs:
    pollingTimeoutSec: '300'

- task: CopyFiles@2
  displayName: 'Copy artifacts'
  inputs:
    SourceFolder: '$(system.defaultworkingdirectory)'
    Contents: 'src/AplosConnector.Web/bin/$(buildConfiguration)/publish/**'
    TargetFolder: '$(build.artifactstagingdirectory)'
    CleanTargetFolder: true
    OverWrite: true

- task: CopyFiles@2
  displayName: 'Copy artifacts'
  inputs:
    SourceFolder: '$(system.defaultworkingdirectory)'
    Contents: 'src/AplosConnector.SyncWorker/bin/$(buildConfiguration)/publish/**'
    TargetFolder: '$(build.artifactstagingdirectory)'
    CleanTargetFolder: false
    OverWrite: true

- task: Bash@3
  displayName: "Mend"
  continueOnError: true
  env:
    MEND_URL: $(MEND-URL)
    MEND_EMAIL: $(MEND-EMAIL)
    MEND_USER_KEY: $(MEND-USER-KEY)
    MEND_LOG_LEVEL: DEBUG
  inputs:
    targetType: "inline"
    failOnStderr: true
    script: |
      # https://github.com/mend-toolkit/mend-examples/blob/main/CI-CD/AzureDevOps/Mend%20CLI/AzureDevOps-linux.yaml
      
      # https://curl.se/docs/optionswhen.html
      echo Downloading mend cli...
      curl https://downloads.mend.io/cli/linux_amd64/mend -sS -o /usr/local/bin/mend && chmod +x /usr/local/bin/mend
      
      # https://docs.mend.io/bundle/integrations/page/configure_the_mend_cli_for_sca.html#Mend-CLI-SCA-parameters
      mend dependencies --dir '$(System.DefaultWorkingDirectory)' --scope 'PEX//Marketplace//$(appName)' --non-interactive --update --fail-policy
      
      # https://docs.mend.io/bundle/integrations/page/mend_cli_exit_codes.html
      export dep_exit=$?
      
      if [[ "$dep_exit" == "9" ]]; then
          echo "##vso[task.logissue type=warning;] 🚨 Dependency scan policy violation."
          echo "##vso[task.complete result=SucceededWithIssues;]"
      elif [[ "$dep_exit" != "0" ]]; then
          echo "##vso[task.logissue type=error;] ⚠️ Dependency scan failed. Exit code $dep_exit https://docs.mend.io/bundle/integrations/page/mend_cli_exit_codes.html"
          echo "##vso[task.complete result=SucceededWithIssues;]"
      else
          echo "✅ No policy violations or failures occurred in dependencies scan"
      fi

- task: PublishBuildArtifacts@1
  displayName: 'Publish artifacts'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'
